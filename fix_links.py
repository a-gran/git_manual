#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ README.md
"""

import re
import sys

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å Windows
if sys.platform == 'win32':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

def create_anchor(text):
    """
    –°–æ–∑–¥–∞–µ—Ç —è–∫–æ—Ä—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º GitHub
    - –£–±–∏—Ä–∞–µ—Ç —ç–º–æ–¥–∑–∏
    - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    - –ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    - –£–±–∏—Ä–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    """
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, —Ç–æ—á–∫–∏ –∏ –¥–µ—Ñ–∏—Å—ã
    text = re.sub(r'[^\w\s\.\-–∞-—è—ë]', '', text, flags=re.UNICODE)

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    text = text.lower()

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = text.strip()

    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    text = re.sub(r'\s+', '-', text)

    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –¥–µ—Ñ–∏—Å
    text = text.replace('.', '')

    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
    text = re.sub(r'-+', '-', text)

    # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    text = text.strip('-')

    return text

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
with open('README.md', 'r', encoding='utf-8') as f:
    content = f.read()

# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ (## –ß–ò–°–õ–û. ...)
headers = re.findall(r'^## (\d+)\.\s+(.+)$', content, re.MULTILINE)

print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∏—Ö —è–∫–æ—Ä—è:\n")
print("-" * 60)

# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
links_list = []
for num, header_text in headers:
    # –°–æ–∑–¥–∞–µ–º —è–∫–æ—Ä—å –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (—Å –Ω–æ–º–µ—Ä–æ–º)
    full_text = f"{num}. {header_text}"
    anchor = create_anchor(full_text)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (—É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ)
    cmd_name = re.sub(r'^[^\w\s]+\s*', '', header_text, flags=re.UNICODE).strip()
    # –ë–µ—Ä–µ–º –≤—Å—ë –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ –∏–ª–∏ –≤—Å—ë, –µ—Å–ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–µ—Ç
    # –î–ª—è –∫–æ–º–∞–Ω–¥ —Ç–∏–ø–∞ "git cherry-pick" –±–µ—Ä–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if cmd_name.startswith('git'):
        # –ë–µ—Ä–µ–º "git –ö–û–ú–ê–ù–î–ê" (–ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Å–ª–æ–≤–∞)
        parts = cmd_name.split(None, 2)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –º–∞–∫—Å–∏–º—É–º 3 —á–∞—Å—Ç–∏
        cmd_name = ' '.join(parts[:2]) if len(parts) >= 2 else cmd_name

    print(f"{num}. –ó–∞–≥–æ–ª–æ–≤–æ–∫: {header_text}")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {cmd_name}")
    print(f"   –Ø–∫–æ—Ä—å: #{anchor}")
    print()

    links_list.append(f"{num}. [{cmd_name}](#{anchor})")

print("-" * 60)
print("\n–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n")
print('\n'.join(links_list))

# –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë
toc_pattern = r'(## üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n\n)(.*?)(\n---)'

new_toc = f"## üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n\n" + '\n'.join(links_list) + "\n\n---"

# –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ
new_content = re.sub(toc_pattern, lambda m: new_toc, content, flags=re.DOTALL)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º
with open('README.md', 'w', encoding='utf-8') as f:
    f.write(new_content)

print("\n" + "=" * 60)
print("‚úÖ –§–∞–π–ª README.md —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
print("=" * 60)
